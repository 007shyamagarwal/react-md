////
/// @group theme
////

@import 'variables';

/// This is really for internal use with the `react-md-theme` mixin, but you might be able to use it for some other stuff.
///
/// @param {String} property - This is normally `color` or `background-color`, but any valid CSS property that accepts
///     color values can be used.
/// @param {String} style - The type of theme style to use. This should be one of the `$rmd-theme-property-values` or a literal
///     color value.
/// @param {Boolean} important [false] - Boolean if the !important flag should also be applied. It is generally recommended
///     to not use this flag.
/// @param {Boolean} edge-opt-out [$rmd-theme-edge-opt-out] - Boolean whether to feature-detect around Edge to avoid emitting
///     CSS variables for it. This is really only intended for use cases where interactions with pseudo-element styles cause
///     problems due to Edge bugs.
@mixin rmd-theme($property, $style, $important: false, $edge-opt-out: $rmd-theme-edge-opt-out) {
  $suffix: if($important, " !important", "");
  @if type-of($style) == "color" or $style == "currentColor" {
    #{$property}: #{$style + $suffix};
  } @else {
    @if not map-has-key($rmd-theme-property-values, $style) {
      @error "Invalid style: '#{$style}'. Choose one of: #{map-keys(rmd-theme-property-values)}";
    }

    $color-value: map-get($rmd-theme-property-values, $style);
    $var-value: var(--rmd-theme-#{$style}, $color-value) + $suffix;

    // Apply the base property and color-value for browsers that do not support css-variables.
    #{$property}: $color-value + $suffix;

    @if $edge-opt-out {
      @at-root {
        @supports not (-ms-ime-align: auto) {
          & {
            #{$property}: $var-value;
          }
        }
      }
    } @else {
      #{$property}: $var-value;
    }
  }
}

/// Creates all the styles for a theme in react-md. This will start by creating CSS Variables
/// for each theme variable and then create class names for each variable.
///
/// @example scss - Normal SCSS Usage
///   // declare your theme variables
///   $rmd-theme-primary: $rmd-teal-500;
///   $rmd-theme-secondary: $rmd-pink-a-400;
///
///   @include react-md-theme;
///
/// @example scss - Alternative SCSS Usage
///   // if you want to create a theme without using the `$rmd-theme-primary` and `$rmd-theme-secondary` varaibles
///   @include react-md-theme($rmd-teal-500, $rmd-pink-a-400);
///
/// @param {Color} primary-color [rmd-theme-primary] - The primary color to use to theme your app.
/// @param {Color} secondary-color [rmd-theme-secondary] - The secondary color to use to theme your app.
@mixin react-md-theme($primary-color: $rmd-theme-primary, $secondary-color: $rmd-theme-secondary) {
  $property-values: map-keys($rmd-theme-property-values);
  :root {
    @each $style in $property-values {
      --rmd-theme-#{$style}: #{map-get($rmd-theme-property-values, $style)};
    }
  }

  @each $style in $property-values {
    .rmd-theme--#{$style} {
      $is-bg: $style == 'background' or $style == 'surface';
      @include rmd-theme(if($is-bg, background-color, color), $style, not($is-bg));
    }
  }
}
